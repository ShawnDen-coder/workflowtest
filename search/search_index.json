{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#my-python-template","title":"My python template","text":"<p>A Python package that ...</p>"},{"location":"#using","title":"Using","text":"<p>To add and install this package as a dependency of your project, run <code>poetry add my-package</code>.</p>"},{"location":"#contributing","title":"Contributing","text":"Prerequisites 1. Set up Git to use SSH  1. [Generate an SSH key](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent#generating-a-new-ssh-key) and [add the SSH key to your GitHub account](https://docs.github.com/en/authentication/connecting-to-github-with-ssh/adding-a-new-ssh-key-to-your-github-account). 1. Configure SSH to automatically load your SSH keys:     <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.ssh/config\nHost *\n  AddKeysToAgent yes\n  IgnoreUnknown UseKeychain\n  UseKeychain yes\nEOF\n</code></pre> 2. Install Docker  1. [Install Docker Desktop](https://www.docker.com/get-started).     - Enable _Use Docker Compose V2_ in Docker Desktop's preferences window.     - _Linux only_:         - [Configure Docker to use the BuildKit build system](https://docs.docker.com/build/buildkit/#getting-started). On macOS and Windows, BuildKit is enabled by default in Docker Desktop.         - Export your user's user id and group id so that [files created in the Dev Container are owned by your user](https://github.com/moby/moby/issues/3206):             <pre><code>cat &lt;&lt; EOF &gt;&gt; ~/.bashrc\nexport UID=$(id --user)\nexport GID=$(id --group)\nEOF\n</code></pre> 3. Install VS Code or PyCharm  1. [Install VS Code](https://code.visualstudio.com/) and [VS Code's Dev Containers extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers). Alternatively, install [PyCharm](https://www.jetbrains.com/pycharm/download/). 2. _Optional:_ install a [Nerd Font](https://www.nerdfonts.com/font-downloads) such as [FiraCode Nerd Font](https://github.com/ryanoasis/nerd-fonts/tree/master/patched-fonts/FiraCode) and [configure VS Code](https://github.com/tonsky/FiraCode/wiki/VS-Code-Instructions) or [configure PyCharm](https://github.com/tonsky/FiraCode/wiki/Intellij-products-instructions) to use it.   Development environments  The following development environments are supported:  1. \u2b50\ufe0f _GitHub Codespaces_: click on _Code_ and select _Create codespace_ to start a Dev Container with [GitHub Codespaces](https://github.com/features/codespaces). 1. \u2b50\ufe0f _Dev Container (with container volume)_: click on [Open in Dev Containers](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/user/my-package) to clone this repository in a container volume and create a Dev Container with VS Code. 1. _Dev Container_: clone this repository, open it with VS Code, and run Ctrl/\u2318 + \u21e7 + P \u2192 _Dev Containers: Reopen in Container_. 1. _PyCharm_: clone this repository, open it with PyCharm, and [configure Docker Compose as a remote interpreter](https://www.jetbrains.com/help/pycharm/using-docker-compose-as-a-remote-interpreter.html#docker-compose-remote) with the `dev` service. 1. _Terminal_: clone this repository, open it with your terminal, and run `docker compose up --detach dev` to start a Dev Container in the background, and then run `docker compose exec dev zsh` to open a shell prompt in the Dev Container.   Developing  - This project follows the [Conventional Commits](https://www.conventionalcommits.org/) standard to automate [Semantic Versioning](https://semver.org/) and [Keep A Changelog](https://keepachangelog.com/) with [Commitizen](https://github.com/commitizen-tools/commitizen). - Run `poe` from within the development environment to print a list of [Poe the Poet](https://github.com/nat-n/poethepoet) tasks available to run on this project. - Run `poetry add {package}` from within the development environment to install a run time dependency and add it to `pyproject.toml` and `poetry.lock`. Add `--group test` or `--group dev` to install a CI or development dependency, respectively. - Run `poetry update` from within the development environment to upgrade all dependencies to the latest versions allowed by `pyproject.toml`. - Run `cz bump` to bump the package's version, update the `CHANGELOG.md`, and create a git tag."},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#050-2024-02-20","title":"0.5.0 (2024-02-20)","text":""},{"location":"changelog/#feat","title":"Feat","text":"<ul> <li>add release action</li> </ul>"},{"location":"changelog/#040-2024-02-19","title":"0.4.0 (2024-02-19)","text":""},{"location":"changelog/#feat_1","title":"Feat","text":"<ul> <li>add github release</li> </ul>"},{"location":"changelog/#030-2024-02-19","title":"0.3.0 (2024-02-19)","text":""},{"location":"changelog/#feat_2","title":"Feat","text":"<ul> <li>add new test</li> </ul>"},{"location":"changelog/#020-2024-02-04","title":"0.2.0 (2024-02-04)","text":""},{"location":"changelog/#feat_3","title":"Feat","text":"<ul> <li>init project</li> </ul>"},{"location":"changelog/#fix","title":"Fix","text":"<ul> <li>fix deploy cmd</li> <li>fix deploy docs</li> <li>jinja template bug</li> </ul>"},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#test","title":"Test","text":"<pre><code>def example_fun():\n\"\"\"Hell word\n    :return: none\n    \"\"\"\n    return\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>docs<ul> <li>gen_api_nav</li> <li>gen_examples</li> </ul> </li> <li>examples<ul> <li>test</li> </ul> </li> <li>src<ul> <li>workflowtest<ul> <li>cfg<ul> <li>config</li> </ul> </li> <li>main</li> </ul> </li> </ul> </li> <li>tests<ul> <li>test_import</li> </ul> </li> </ul>"},{"location":"reference/docs/gen_api_nav/","title":"Gen api nav","text":""},{"location":"reference/docs/gen_api_nav/#docs.gen_api_nav","title":"<code>docs.gen_api_nav</code>","text":"<p>Plugin for generate API docs.</p>"},{"location":"reference/docs/gen_examples/","title":"Gen examples","text":""},{"location":"reference/docs/gen_examples/#docs.gen_examples","title":"<code>docs.gen_examples</code>","text":"<p>Plugin for generate API docs.</p>"},{"location":"reference/examples/test/","title":"Test","text":""},{"location":"reference/examples/test/#examples.test","title":"<code>examples.test</code>","text":""},{"location":"reference/examples/test/#examples.test.example_fun","title":"<code>example_fun()</code>","text":"<p>Hell word :return: none</p>"},{"location":"reference/src/workflowtest/main/","title":"Main","text":""},{"location":"reference/src/workflowtest/main/#src.workflowtest.main","title":"<code>src.workflowtest.main</code>","text":"<p>workflowtest package</p>"},{"location":"reference/src/workflowtest/main/#src.workflowtest.main.run","title":"<code>run()</code>","text":"<p>This function returns the string \"Hello, World!\".</p> <p>Returns:</p> <ul> <li> str(            <code>str</code> )        \u2013          <p>The string \"Hello, World!\".</p> </li> </ul>"},{"location":"reference/src/workflowtest/cfg/config/","title":"Config","text":""},{"location":"reference/src/workflowtest/cfg/config/#src.workflowtest.cfg.config","title":"<code>src.workflowtest.cfg.config</code>","text":""},{"location":"reference/tests/test_import/","title":"Test import","text":""},{"location":"reference/tests/test_import/#tests.test_import","title":"<code>tests.test_import</code>","text":"<p>Test workflowtest.</p>"},{"location":"reference/tests/test_import/#tests.test_import.test_import","title":"<code>test_import()</code>","text":"<p>Test that the package can be imported.</p>"}]}